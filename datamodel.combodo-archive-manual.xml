<?xml version="1.0" encoding="UTF-8"?>
<itop_design xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.3">
    <classes>
      <class id="Ticket">
            <properties>
                <archive _delta="define">
                    <enabled>true</enabled>
                </archive>
            </properties>
        </class>
      <class id="ArchivingRule" _delta="define">
        <parent>cmdbAbstractObject</parent>
        <properties>
          <category>bizmodel,searchable</category>
          <abstract>false</abstract>
          <db_table>archiving_rule</db_table>
          <naming>
            <attributes>
              <attribute id="name"/>
            </attributes>
          </naming>
          <reconciliation>
            <attributes>
              <attribute id="target_class"/>
            </attributes>
          </reconciliation>
        </properties>
        <fields>
          <field id="target_class" xsi:type="AttributeString">
            <sql>target_class</sql>
            <default_value/>
            <is_null_allowed>false</is_null_allowed>
          </field>
          <field id="name" xsi:type="AttributeString">
            <sql>name</sql>
            <default_value/>
            <is_null_allowed>false</is_null_allowed>
          </field>
          <field id="status" xsi:type="AttributeEnum">
            <values>
              <value id="active">active</value>
              <value id="inactive">inactive</value>
            </values>
            <sql>status</sql>
            <default_value>active</default_value>
            <is_null_allowed>false</is_null_allowed>
            <display_style>list</display_style>
          </field>
          <field id="type" xsi:type="AttributeEnum">
            <values>
              <value id="simple">simple</value>
              <value id="advanced">advanced</value>
            </values>
            <dependencies>
              <attribute id="date_to_check_att"/>
              <attribute id="autoarchive_delay"/>
              <attribute id="oql_scope"/>
            </dependencies>
            <sql>type</sql>
            <default_value>simple</default_value>
            <is_null_allowed>false</is_null_allowed>
          </field>
          <field id="pre_archiving_status_code" xsi:type="AttributeString">
            <sql>pre_archiving_status_code</sql>
            <default_value/>
            <is_null_allowed>true</is_null_allowed>
          </field>
          <field id="pre_archiving_status_value" xsi:type="AttributeString">
            <sql>pre_archiving_status_value</sql>
            <default_value/>
            <is_null_allowed>true</is_null_allowed>
          </field>
          <field id="date_to_check_att" xsi:type="AttributeString">
            <sql>date_to_check_att</sql>
            <default_value/>
            <is_null_allowed>true</is_null_allowed>
          </field>
          <field id="autoarchive_delay" xsi:type="AttributeInteger">
            <sql>autoarchive_delay</sql>
            <default_value/>
            <is_null_allowed>true</is_null_allowed>
          </field>
          <field id="oql_scope" xsi:type="AttributeOQL">
            <sql>oql_scope</sql>
            <default_value/>
            <is_null_allowed>true</is_null_allowed>
          </field>
        </fields>
        <methods>
          <method id="GetInitialStateAttributeFlags">
            <static>false</static>
            <access>public</access>
            <type>Overload-DBObject</type>
            <code><![CDATA[	public function GetInitialStateAttributeFlags($sAttCode, &$aReasons = array())
	{
		if ($sAttCode == 'type')
		{
		    return OPT_ATT_READONLY;
		}
		return parent::GetInitialStateAttributeFlags($sAttCode, $aReasons);
	}
]]></code>
          </method>
          <method id="GetAttributeFlags">
            <static>false</static>
            <access>public</access>
            <type>Overload-DBObject</type>
            <code><![CDATA[	public function GetAttributeFlags($sAttCode, &$aReasons = array(), $sTargetState = '')
	{
		if ($sAttCode == 'type')
		{
		    return OPT_ATT_READONLY;
		}
		return parent::GetAttributeFlags($sAttCode, $aReasons, $sTargetState);
	}
]]></code>
          </method>
          <method id="ComputeValues">
            <static>false</static>
            <access>public</access>
            <type>Overload-DBObject</type>
            <code><![CDATA[	public function ComputeValues()
	{
		// Compute the type of the rule
		$oAttDef = MetaModel::GetAttributeDef(get_class($this), 'oql_scope');
		$sType = ($oAttDef->IsNull($this->Get('oql_scope'))) ? 'simple' : 'advanced';

		$this->Set('type', $sType);

		return parent::ComputeValues();
	}]]></code>
          </method>
          <method id="DoCheckToWrite">
            <static>false</static>
            <access>public </access>
            <code><![CDATA[    public function DoCheckToWrite()
	{
		parent::DoCheckToWrite();

		// Checking class / attributes consistency with Datamodel
		$sClass = $this->Get('target_class');
		$sPreArchivingStatusCode = $this->Get('pre_archiving_status_code');
		$sPreArchivingStatusValue = $this->Get('pre_archiving_status_value');
		$sDateToCheckAttCode = $this->Get('date_to_check_att');
		$sOqlScope = $this->Get('oql_scope');
		// - Class
		if(!MetaModel::IsValidClass($sClass))	{
		    $this->m_aCheckIssues[] = Dict::Format('Class:ArchivingRule/Error:ClassNotValid', $sClass);
		    return;
		}
		if(!MetaModel::IsArchivable($sClass))	{
		    $this->m_aCheckIssues[] = Dict::Format('Class:ArchivingRule/Error:ClassNotArchivable', $sClass);
		    return;
		}
		// - Prearchiving status code attribute
		if(!empty($sPreArchivingStatusCode) ) {
			if (!MetaModel::IsValidAttCode($sClass, $sPreArchivingStatusCode)) {
				$this->m_aCheckIssues[] = Dict::Format('Class:ArchivingRule/Error:StatusNotValid', $sClass, $sPreArchivingStatusCode);
			} else {
				$oStatusAttrDef = MetaModel::GetAttributeDef($sClass, $sPreArchivingStatusCode);
				if (!$oStatusAttrDef instanceof AttributeEnum) {
				  $oAttStatusDef = MetaModel::GetAttributeDef('ArchivingRule', 'pre_archiving_status_code');
					$this->m_aCheckIssues[] = Dict::Format('Class:ArchivingRule/Error:StatusCodeNotValid', $sClass, $sPreArchivingStatusCode,$oAttStatusDef->GetLabel());
				} else {
					// - Prearchiving status code value
					$aStates = $oStatusAttrDef->GetAllowedValues();
					if (!empty($sPreArchivingStatusValue) && !array_key_exists($sPreArchivingStatusValue, $aStates)) {
						$this->m_aCheckIssues[] = Dict::Format('Class:ArchivingRule/Error:StatusValueNotValid', $sClass, $sPreArchivingStatusCode, $sPreArchivingStatusValue);
					}
				}
			}
		}
		// - Date to check attribute
		if(!empty($sDateToCheckAttCode))
		{
            if(!MetaModel::IsValidAttCode($sClass, $sDateToCheckAttCode))
            {
                $this->m_aCheckIssues[] = Dict::Format('Class:ArchivingRule/Error:AttributeNotValid', $sClass, $sDateToCheckAttCode);
            }
            else
            {
                $oAttDef = MetaModel::GetAttributeDef($sClass, $sDateToCheckAttCode);
                if(($oAttDef instanceof AttributeDateTime) === false)
                {
                    $oAttDate = MetaModel::GetAttributeDef('ArchivingRule', 'date_to_check_att');
                    $this->m_aCheckIssues[] = Dict::Format('Class:ArchivingRule/Error:AttributeMustBeDate', $sClass, $sDateToCheckAttCode, $oAttDate->GetLabel());
                }
            }
        }

		// Checking option consistency
		// - At least one option must be filled (either simple or advanced)
		$bNoOptionFilled = true;
		$aOptionAttCodes = array( 'date_to_check_att', 'autoarchive_delay','oql_scope');
		foreach($aOptionAttCodes as $sOptionAttCode)
		{
			$oAttDef = MetaModel::GetAttributeDef(get_class($this), $sOptionAttCode);
			$value = $this->Get($sOptionAttCode);
			if(!$oAttDef->IsNull($value))
			{
				$bNoOptionFilled = false;
				break;
			}
		}

		if($bNoOptionFilled)
		{
			$this->m_aCheckIssues[] = Dict::Format('Class:ArchivingRule/Error:NoOptionFilled');
		}
		// - Checking that option 1 is valid if selected
		elseif(empty($sOqlScope))
		{
			$bOptionOneValid = true;

			// Removing OQL attribute as we only test option 1 attributes
			array_pop($aOptionAttCodes);
			foreach($aOptionAttCodes as $sOptionAttCode)
			{
				$oAttDef = MetaModel::GetAttributeDef(get_class($this), $sOptionAttCode);
				$value = $this->Get($sOptionAttCode);
				if($oAttDef->IsNull($value))
				{
					$bOptionOneValid = false;
					break;
				}
			}

			if(!$bOptionOneValid)
			{
				$this->m_aCheckIssues[] = Dict::Format('Class:ArchivingRule/Error:OptionOneMissingField');
			}
		}
		// - Checking that option 2 OQL is about the right class
		elseif(!empty($sOqlScope))
		{
		    try
		    {
		        $oSearch = DBObjectSearch::FromOQL($sOqlScope);
		        $sOqlClass = $oSearch->GetClass();
			    if($sOqlClass !== $sClass)
			    {
				    $this->m_aCheckIssues[] = Dict::Format('Class:StateRule/Error:OQLClassDontMatch', $sClass, $sOqlClass);
			    }
		    }
		    catch(Exception $e)
		    {
		        $this->m_aCheckIssues[] = Dict::Format('Class:StateRule/Error:OQLNotValid', $e->getMessage());
		    }
		}
	}]]></code>
          </method>
          <method id="GetFilter">
            <static>false</static>
            <access>public</access>
            <type>Overload-DBObject</type>
            <code><![CDATA[	/**
    * @return DBObjectSearch
    */
    public function GetFilter()
    {
      if ($this->Get('type') === 'advanced')	{
        $oSearch = DBObjectSearch::FromOQL($this->Get('oql_scope'));
      } else  {
              $sClass = $this->Get('target_class');
              $sStatusAttCode = $this->Get('pre_archiving_status_code');
              $sDateAttCode = $this->Get('date_to_check_att');
              $sOQL = 'SELECT '.$sClass.' WHERE ';
              if (!empty($sStatusAttCode)) {
               $sOQL .= $sStatusAttCode.' = :pre_archiving_status_value AND ';
              }
              $sOQL .= $sDateAttCode.' <= DATE_SUB(NOW(), INTERVAL :autoarchive_delay DAY)';
              $oSearch = DBObjectSearch::FromOQL($sOQL);
              $oSearch->SetInternalParams(
                array(
                  'pre_archiving_status_value' => $this->Get('pre_archiving_status_value'),
                  'autoarchive_delay' => $this->Get('autoarchive_delay'),
                )
              );
      }
     return $oSearch;
	}]]></code>
          </method>
          <method id="DisplayBareRelations">
            <static>false</static>
            <access>public</access>
            <type>Overload-DBObject</type>
            <code><![CDATA[	/**
	 * @param \WebPage $oPage
	 * @param bool $bEditMode
	 */
	public function DisplayBareRelations(WebPage $oPage, $bEditMode = false)
	{
		parent::DisplayBareRelations($oPage, $bEditMode);

		if(!$bEditMode)
		{
			$oPage->SetCurrentTab(Dict::S('UI:AutoArchive:Preview'));
			$this->OnShowPreview($oPage);
		}
	}]]></code>
          </method>
          <method id="OnShowPreview">
            <static>false</static>
            <access>protected</access>
            <type>Overload-DBObject</type>
            <code><![CDATA[/**
	 * @param \WebPage $oPage
	 */
	public function OnShowPreview(WebPage $oPage)
	{
		  $sClass = $this->Get('target_class');

	  	if (version_compare(ITOP_DESIGN_LATEST_VERSION , '3.0') < 0) {
					$oPage->p(MetaModel::GetClassIcon($sClass)."&nbsp;".Dict::Format('UI:AutoArchive:Title', MetaModel::GetName($sClass)));
			} else {
          $oUiMedallionBlock = new Combodo\iTop\Application\UI\Base\Component\MedallionIcon\MedallionIcon(MetaModel::GetClassIcon($sClass, false));
          $oUiMedallionBlock->SetDescription(Dict::Format('UI:AutoArchive:Title', MetaModel::GetName($sClass)));
					$oPage->AddSubBlock($oUiMedallionBlock);
			};

		$aParams = array(
			'menu' => true,
			'table_id' => 'AutoArchive_preview_rule_'.$this->GetKey(),
		);
		$oBlock = new DisplayBlock($this->GetFilter(), 'list', true, $aParams);
		$oBlock->Display($oPage, 'rel_preview_rule_'.$this->GetKey(), $aParams);
	}]]></code>
          </method>
          <method id="OnExecution ">
            <static>true</static>
            <access>protected</access>
            <type>Overload-DBObject</type>
            <code><![CDATA[/**
	 * @param \WebPage $oPage
	 */
	public static function OnExecution ( $aIds)
	{
		//foreach ($aIds as $sFinalClass => $aObjectIds)
		//Default do nothing
	}]]></code>
          </method>
        </methods>
        <presentation>
          <list>
            <items>
              <item id="target_class">
                <rank>10</rank>
              </item>
              <item id="name">
                <rank>20</rank>
              </item>
              <item id="status">
                <rank>30</rank>
              </item>
              <item id="type">
                <rank>40</rank>
              </item>
            </items>
          </list>
          <search>
            <items>
              <item id="name">
                <rank>10</rank>
              </item>
              <item id="target_class">
                <rank>20</rank>
              </item>
              <item id="status">
                <rank>30</rank>
              </item>
              <item id="type">
                <rank>40</rank>
              </item>
              <item id="pre_archiving_status_code">
                <rank>50</rank>
              </item>
              <item id="pre_archiving_status_value">
                <rank>60</rank>
              </item>
              <item id="date_to_check_att">
                <rank>70</rank>
              </item>
              <item id="autoarchive_delay">
                <rank>80</rank>
              </item>
              <item id="oql_scope">
                <rank>90</rank>
              </item>
            </items>
          </search>
          <details>
            <items>
              <item id="col:col0">
                <rank>10</rank>
                <items>
                  <item id="fieldset:ArchivingRule:general">
                    <rank>10</rank>
                    <items>
                      <item id="name">
                        <rank>10</rank>
                      </item>
                      <item id="target_class">
                        <rank>20</rank>
                      </item>
                      <item id="status">
                        <rank>30</rank>
                      </item>
                      <item id="type">
                        <rank>40</rank>
                      </item>
                    </items>
                  </item>
                </items>
              </item>
              <item id="col:col1">
                <rank>20</rank>
                <items>
                  <item id="fieldset:ArchivingRule:simple">
                    <rank>10</rank>
                    <items>
                      <item id="pre_archiving_status_code">
                        <rank>10</rank>
                      </item>
                      <item id="pre_archiving_status_value">
                        <rank>20</rank>
                      </item>
                      <item id="date_to_check_att">
                        <rank>30</rank>
                      </item>
                      <item id="autoarchive_delay">
                        <rank>40</rank>
                      </item>
                    </items>
                  </item>
                </items>
              </item>
              <item id="col:col2">
                <rank>30</rank>
                <items>
                  <item id="fieldset:ArchivingRule:advanced">
                    <rank>100</rank>
                    <items>
                      <item id="oql_scope">
                        <rank>10</rank>
                      </item>
                    </items>
                  </item>
                </items>
              </item>
            </items>
          </details>
        </presentation>
      </class>
    </classes>
  <menus>
    <menu xsi:type="OQLMenuNode" id="ArchivingRule" _delta="define">
      <parent>ConfigurationTools</parent>
      <rank>16</rank>
      <oql>SELECT ArchivingRule</oql>
      <do_search>1</do_search>
      <enable_class>ArchivingRule</enable_class>
    </menu>
  </menus>
  <user_rights>
    <groups>
      <group id="Archiving" _delta="define">
        <classes>
          <class id="ArchivingRule" />
        </classes>
      </group>
    </groups>
    <profiles>
      <profile id="51" _delta="define">
        <name>Archiving Agent</name>
        <description>Person in charge of archiving. Must be used in conjunction with other profiles (e.g. Configuration Manager, Service Manager,…).</description>
        <groups>
          <group id="Archiving">
            <actions>
              <action id="action:delete">allow</action>
              <action id="action:write">allow</action>
              <action id="action:bulk write">allow</action>
            </actions>
          </group>
        </groups>
      </profile>
    </profiles>
  </user_rights>
</itop_design>
